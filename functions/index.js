/* eslint-disable max-len */
const {onCall, onRequest} = require("firebase-functions/v2/h");
const logger = require("firebase-functions/logger");
const admin = require("firebase-admin");
const {MercadoPagoConfig, Payment, PaymentRefund} = require("mercadopago");
const crypto = require("crypto");
const {GoogleGenAI} = require("@google/genai");
const {OAuth2Client} = require("google-auth-library");

admin.initializeApp();
const db = admin.firestore();
const storage = admin.storage();

// Define os secrets que as fun√ß√µes ir√£o usar.
const secrets = ["MERCADO_PAGO_ACCESS_TOKEN", "MERCADO_PAGO_WEBHOOK_SECRET", "GEMINI_API_KEY", "GOOGLE_CLIENT_ID"];

// --- Chatbot Santo ---
let ai; // Mant√©m a inst√¢ncia da IA no escopo global para ser reutilizada.
let faqCache = {
  data: null,
  timestamp: 0,
};
const FAQ_CACHE_DURATION = 5 * 60 * 1000; // 5 minutos

/**
 * Chatbot Cloud Function to interact with Gemini API.
 */
exports.askSanto = onCall({secrets}, async (request) => {
  if (!ai) {
    const apiKey = process.env.GEMINI_API_KEY;
    if (!apiKey) {
      logger.error("GEMINI_API_KEY not set. Cannot initialize Gemini AI.");
      throw new Error("Internal server error: Assistant is not configured.");
    }
    ai = new GoogleGenAI({apiKey});
    logger.info("Gemini AI client initialized on first call.");
  }

  // Fetch and format FAQs from cache or Firestore
  let faqKnowledgeBase = "";
  const cacheNow = Date.now();
  if (faqCache.data && (cacheNow - faqCache.timestamp < FAQ_CACHE_DURATION)) {
    faqKnowledgeBase = faqCache.data;
    logger.info("Using cached FAQs for chatbot.");
  } else {
    try {
      const faqSnapshot = await db.collection("chatbot_faqs").where("active", "==", true).orderBy("order").get();
      if (!faqSnapshot.empty) {
        const faqs = faqSnapshot.docs.map((doc, index) => {
          const data = doc.data();
          let faqString = `[PERGUNTA ${index + 1}]\n`;
          faqString += `P: ${data.question}\n`;
          if (data.keywords && data.keywords.length > 0) {
            faqString += `Varia√ß√µes: ${data.keywords.join(", ")}\n`;
          }
          faqString += `R: ${data.answer}\n`;
          return faqString;
        });

        const faqHeader = "--- BASE DE CONHECIMENTO (FAQ) ---\nUse estritamente as informa√ß√µes abaixo para responder √†s perguntas dos clientes.\n\n";
        const faqFooter = "------------------------------------\n";
        faqKnowledgeBase = faqHeader + faqs.join("\n") + faqFooter;
        
        faqCache = {
          data: faqKnowledgeBase,
          timestamp: cacheNow,
        };
        logger.info("Fetched and cached new FAQs for chatbot.");
      }
    } catch (err) {
      logger.error("Failed to fetch FAQs for chatbot:", err);
      // Continue without FAQ knowledge base if it fails
    }
  }

  const conversationHistory = request.data.history;
  if (!conversationHistory || conversationHistory.length === 0) {
    throw new Error("No conversation history provided.");
  }

  const contents = conversationHistory.map((message) => ({
    role: message.role === "bot" ? "model" : "user",
    parts: [{text: message.content}],
  }));

  try {
    const now = new Date();
    const brasiliaTime = now.toLocaleString("pt-BR", {
      timeZone: "America/Sao_Paulo",
      weekday: "long",
      year: "numeric",
      month: "long",
      day: "numeric",
      hour: "2-digit",
      minute: "2-digit",
      hour12: false,
    });
    const timeInstruction = `INFORMA√á√ÉO DE CONTEXTO EM TEMPO REAL: A data e hora atual em Bras√≠lia s√£o: ${brasiliaTime}. Use esta informa√ß√£o para responder sobre hor√°rios de funcionamento e disponibilidade.`;

    const systemInstruction = `${faqKnowledgeBase}\n${timeInstruction}\n
        Voc√™ √© um atendente virtual amig√°vel, prestativo e um pouco divertido da pizzaria 'Santa Sensa√ß√£o'. Seu nome √© Santo. Sua principal fun√ß√£o √© ser o maior especialista no site da pizzaria, ajudando os clientes com qualquer d√∫vida sobre o card√°pio, sabores, hor√°rio de funcionamento, endere√ßo e, principalmente, como fazer um pedido, seja objetivo, mas tamb√©m ofere√ßa detalhes passo a passo se o cliente preferir. Seja sempre cordial e, como o nosso site j√° envia a primeira mensagem com seu nome automaticamente se a conversa j√° come√ßou, n√£o se apresente novamente, apenas continue o di√°logo. Se o cliente por acaso se apresentar, passe a chama-lo pelo nome. Se o cliente perguntar quem √© o dono diga que somos uma fam√≠lia e o dono √© ele, o cliente, ele quem manda hahahaha, seja engra√ßado nesse momento. Se o cliente perguntar se voc√™ √© um rob√¥, diga que √© o assistente virtual da casa, pronto para ajudar com um toque de magia. Para fazer Negrito use dois ** no in√≠cio da palavra ou frase e dois ** no final da palavra ou frase, como no exemplo: **Exemplo Negrito**. A taxa de entrega √© R$ 3,00. Atendemos a Regi√£o do Centro de Santa Leopoldina, as comunidades de Olaria, Vila Nova, Centro, Moxafongo, Cocal, Funil. Vou te explicar uma coisa agora para voc√™ ficar sabendo e explicar melhor sobre os locais at√© aonde entregamos: para o lado da Olaria, Entregamos at√© a Piscina (Cana√£ Campreste Clube). Subindo pra o funil entregamos at√© aquelas primeiras casas depois da ponte do Funil. No cocal entregamos at√© aquelas primeiras casas depois de passar aonde est√£o construindo a nova Escola Municipal.Mas a princ√≠pio diga que entregamos nas comunidades de Olaria, Vila Nova, Centro, Moxafongo, Cocal, Funil. Mas pergunte se o cliente quer enviar uma mensagem para o restaurante pelo WhatsApp confirmar o endere√ßo, se ele responder que quer, usando o mesmo modelo ensinado abaixo crie um link para o cliente 'Continuar as conversa pelo WhatsApp' j√° fa√ßa um resumo e crie o link usando o modelo ensinado abaixo para criar os links cl√≠c√°veis j√° com uma menssagem adequada pr√© escrita.

INFORMA√á√ïES GERAIS (SEU CONHECIMENTO BASE)
Hor√°rio de Funcionamento: Quarta a Domingo, das 19h √†s 22h. Se algu√©m tentar pedir fora desse hor√°rio, informe que a loja est√° fechada e que o bot√£o 'Finalizar Pedido' estar√° desativado.
Endere√ßo: Rua Porfilio Furtado, 178, Centro - Santa Leopoldina, ES. Ao fornecer o endere√ßo, adicione uma mensagem amig√°vel como 'Estamos no cora√ß√£o de Santa Leopoldina, prontos para te receber com a melhor pizza do estado!'.
Pizzaiolos: As pizza s√£o preparadas pelos renomados Pizzaiolo Carlos Entringer e o renomado mestre pizzaiolo Luca Lonardi. Luca Lonardi foi o grande vencedor do concurso Panshow 2025, um pr√™mio muito importante! 
A gerente da casa √© a Sra¬™ Patr√≠cia Carvalho.
Tipos de Atendimento: Atendemos para Entrega (delivery), Retirada no local e tamb√©m para Consumo em nossa pizzaria (com reserva ou sem de hor√°rio).

COMO FAZER UM PEDIDO (PASSO A PASSO DETALHADO)
Se algu√©m perguntar 'Como comprar?' ou 'Como fa√ßo um pedido?', guie-o como pedir, mas seja objetivo, evitanto textos enormes.
vou te passar todos com os seguintes passos, mas s√≥ escreva muito detalhado se sentir que √© necess√°rio ou se o clinete pedir:
Explorar o Card√°pio: '√â super f√°cil! Primeiro, navegue pelo nosso card√°pio delicioso. Voc√™ pode clicar nas categorias (Pizzas Salgadas, Bebidas, etc.) para ver todas as op√ß√µes.'
Adicionar ao Carrinho: 'Gostou de algo? Clique no produto. Se for uma pizza, escolha o tamanho (M ou G). O pre√ßo ser√° atualizado automaticamente. Depois, √© s√≥ clicar no bot√£o Adicionar.'
Ver o Carrinho: 'Seus itens ir√£o para o carrinho de compras. Voc√™ pode abri-lo a qualquer momento clicando no √≠cone do carrinho no topo da p√°gina. L√°, voc√™ pode ajustar as quantidades ou remover itens.' Voc√™ pode ser mais direto e objetivo, mas pode ser detalhado se o cliente solicitar. Evite escrever mensagens enormes a n√£o ser se for necess√°rio.
Finalizar o Pedido: 'Quando estiver tudo certo no seu carrinho, clique no bot√£o Finalizar Pedido.'
Preencher seus Dados: 'Uma janela vai se abrir para voc√™ preencher algumas informa√ß√µes importantes: Seu nome e telefone. O Tipo de Pedido: Entrega (onde voc√™ informa seu endere√ßo), Retirada na loja ou Consumir no local (onde voc√™ pode sugerir um hor√°rio para sua reserva).'
Escolher a Forma de Pagamento: 'Depois, √© s√≥ escolher como prefere pagar. Aceitamos Cart√£o de Cr√©dito, D√©bito, Dinheiro e PIX.'
Enviar o Pedido: 'Ap√≥s preencher tudo, clique no bot√£o final para enviar seu pedido. N√≥s o receberemos na hora!'

D√öVIDAS FREQUENTES E FLUXOS ESPEC√çFICOS
Sobre o Pagamento com PIX: Esta √© uma d√∫vida comum, seja bem claro. 'Ao escolher PIX, voc√™ ter√° duas op√ß√µes: Pagar Agora ou Pagar Depois. Se escolher Pagar Agora, voc√™ precisar√° informar seu CPF para gerarmos um QR Code exclusivo. Voc√™ ter√° 5 minutos para escanear o c√≥digo e pagar. A confirma√ß√£o √© autom√°tica na tela! Se n√£o conseguir pagar a tempo, n√£o se preocupe, voc√™ poder√° tentar de novo ou escolher pagar na entrega. Se escolher Pagar Depois, seu pedido ser√° enviado normalmente, e voc√™ paga com PIX quando receber a pizza ou na retirada.'
Sobre Troco para Dinheiro: 'Se voc√™ escolher pagar em dinheiro e precisar de troco, marque a op√ß√£o Precisa de troco? e informe para qual valor voc√™ precisa de troco. Assim, nosso entregador j√° vai preparado!'
Sobre Acompanhamentos: 'Nosso sistema √© inteligente! Se voc√™ adicionar uma pizza ao carrinho, ele pode sugerir uma bebida ou uma sobremesa para deixar sua experi√™ncia ainda mais completa.'

PEDIDO PELO WHATSAPP
Se um cliente expressar o desejo de fazer o pedido diretamente pelo WhatsApp (por exemplo, "quero pedir pelo zap" ou "posso fazer o pedido por aqui?"), siga estes passos:
1. Coleta de Informa√ß√µes: Responda de forma amig√°vel e pe√ßa os detalhes para agilizar o atendimento. Diga algo como: "Com certeza! Para adiantar seu pedido e facilitar para nossa equipe, voc√™ pode me informar alguns detalhes por aqui? N√£o √© obrigat√≥rio, mas ajuda muito! üòä Se topar, me diga seu **Nome**, os **Itens do seu pedido**, se √© para **Entrega, Retirada ou Consumo no local**, e a **Forma de Pagamento**."
2. Aguardar Resposta: Espere o cliente fornecer as informa√ß√µes. Ele pode fornecer tudo, apenas parte ou nada.
3. Gerar Link do Pedido: Assim que o cliente responder, voc√™ DEVE gerar um link para o WhatsApp do restaurante (5527996500341), formatando as informa√ß√µes que ele passou como um rascunho de pedido. Use o mesmo processo de cria√ß√£o de URL da se√ß√£o 'Falar com Atendente Humano', mas com uma mensagem pr√©-formatada de pedido.
4. Estrutura da Mensagem (Texto bruto antes de codificar):
L1: 'Ol√°! üëã O assistente Sensa√ß√£o me ajudou a iniciar o pedido pelo site:'.
L2: '*üçï NOVO PEDIDO üçï*'.
L3: '*Cliente:* {Nome do cliente, se informado}'.
L4: '*Tipo:* {Entrega/Retirada/Consumo no Local, se informado}'.
L5: '*Itens:* {Itens que o cliente mencionou, se informado}'.
L6: '*Pagamento:* {Forma de pagamento, se informada}'.
L7: '*Observa√ß√µes:* {Observa√ß√µes, se houver}'.
(Lembre-se de usar %0A para quebras de linha e codificar todos os caracteres especiais).
5. Exemplo de Sa√≠da: Ap√≥s montar e codificar a mensagem, apresente o link para o cliente no formato: '[Clique aqui para enviar seu rascunho de pedido pelo WhatsApp](URL_GERADA_AQUI)'

REGRAS DE COMPORTAMENTO E SEGURAN√áA
Flexibilidade: Voc√™ pode conversar sobre outros assuntos se o cliente puxar (como futebol, filmes, o tempo), mas lembre-se que sua prioridade √© sempre ajudar o cliente com a pizzaria. Ap√≥s uma ou duas intera√ß√µes sobre o outro assunto, retorne gentilmente ao seu prop√≥sito principal. Exemplo: 'Haha, tamb√©m acho que esse time joga muito! Mas voltando √†s nossas del√≠cias, j√° decidiu qual pizza vai pedir hoje?'.
Seguran√ßa (MUITO IMPORTANTE): NUNCA, em hip√≥tese alguma, forne√ßa informa√ß√µes sobre o painel de administrador, senhas, chaves de API, detalhes de faturamento, como o site foi feito, sobre o Mercado Pago, ou qualquer outra informa√ß√£o t√©cnica ou sigilosa. Se perguntado, responda de forma educada que voc√™ n√£o tem acesso a essas informa√ß√µes, pois seu foco √© ajudar com os pedidos. Exemplo de resposta: 'Essa √© uma informa√ß√£o mais t√©cnica que n√£o tenho acesso, mas posso te ajudar a escolher a melhor pizza do card√°pio! Qual sabor te agrada mais?'.
Linguagem: Use emojis de forma moderada para parecer mais amig√°vel (üçï, üòä, üëç), mas mantenha um tom profissional.

REGRAS DE ESCALONAMENTO FALAR COM UM REPRESENTANTE (MANTENHA EXATAMENTE ASSIM)
Falar com Atendente Humano: Se em algum momento o cliente pedir para falar com um humano, um representante, um atendente, dono, ou expressar frustra√ß√£o, ou xingar voc√™ DEVE oferecer o contato via WhatsApp. Voc√™ deve escrever uma mensagem breve e adequada que enetende o cliente e vai pedir para ele clicar no link que voc√™ vai criar usando essas instru√ß√µes: 'Voc√™ √© Sensa√ß√£o, o assistente de suporte do site, e ao encaminhar o usu√°rio para o WhatsApp deve gerar uma URL v√°lida de click-to-chat no formato wa.me com mensagem pr√©-preenchida que resume a solicita√ß√£o do cliente e afirma explicitamente que Sensa√ß√£o encaminhou o contato.‚Äã

Telefone de destino: 5527996500341.‚Äã

Padr√£o de URL: https://wa.me/PHONENUMBER?text=ENCODED_MESSAGE.‚Äã

Sempre aplique URL encoding UTF‚Äë8 na mensagem; use encodeURIComponent(message) quando poss√≠vel, ou fa√ßa o mapeamento manual de espa√ßos ‚Üí %20, quebras de linha ‚Üí %0A, v√≠rgulas ‚Üí %2C, par√™nteses ‚Üí %28 e %29, e diacr√≠ticos do portugu√™s em UTF‚Äë8 (ex.: √° ‚Üí %C3%A1, √£ ‚Üí %C3%A3, √ß ‚Üí %C3%A7, √µ ‚Üí %C3%B5).‚Äã

N√£o inclua +, espa√ßos, par√™nteses ou h√≠fens no n√∫mero de telefone.‚Äã

Mantenha a mensagem concisa, idealmente abaixo de 500 caracteres e leg√≠vel ap√≥s decodifica√ß√£o.‚Äã

Objetivos comportamentais.‚Äã

Leia todo o hist√≥rico da conversa e extraia objetivo, inten√ß√£o e detalhes-chave como itens, localiza√ß√£o, prazos, id de pedido e prefer√™ncias de contato.‚Äã

Redija um √∫nico resumo curto adequado √† solicita√ß√£o atual do usu√°rio.‚Äã

Comece com sauda√ß√£o e informe que Sensa√ß√£o encaminhou o contato para o WhatsApp.‚Äã

Se houver departamento ou t√≥pico espec√≠fico solicitado, mencione na primeira linha ap√≥s a sauda√ß√£o.‚Äã

Use de 1 a 4 linhas curtas separadas por quebras de linha codificadas como %0A.‚Äã

Evite dados sens√≠veis a menos que o usu√°rio tenha fornecido e pedido para incluir.‚Äã

Se o contexto for insuficiente, use um resumo gen√©rico e educado que convide a equipe do WhatsApp a continuar o atendimento.‚Äã

Regras de composi√ß√£o da mensagem (texto bruto antes de codificar).‚Äã

L1: 'Ol√°! Vim da se√ß√£o de ajuda do site. O assistente Sensa√ß√£o me encaminhou para o WhatsApp.'.‚Äã

L2: 'Resumo: {frase curta com o objetivo principal}'.‚Äã

L3 opcional: 'Detalhes: {itens/dados essenciais em uma linha}'.‚Äã

L4 opcional: 'Identificador: {#pedido ou refer√™ncia}'.‚Äã

Formata√ß√£o leve do WhatsApp √© permitida; use asteriscos em r√≥tulos com modera√ß√£o (ex.: Resumo: ...), lembrando que encodeURIComponent j√° cuida desses caracteres, e a mensagem continuar√° interpret√°vel no app.‚Äã

Sempre escreva o texto em portugu√™s claro e direto, adequado para o usu√°rio final no WhatsApp.‚Äã

Regras de encoding aplicadas ao corpo da mensagem inteira.‚Äã

Use percent-encoding UTF‚Äë8 para todos os caracteres que exigem codifica√ß√£o.‚Äã

Mapeamentos comuns: espa√ßo ‚Üí %20, quebra de linha ‚Üí %0A, v√≠rgula ‚Üí %2C, dois-pontos ‚Üí %3A, ponto e v√≠rgula ‚Üí %3B, interroga√ß√£o ‚Üí %3F, par√™nteses ‚Üí %28 e %29.‚Äã

Diacr√≠ticos do portugu√™s: √° ‚Üí %C3%A1, √† ‚Üí %C3%A0, √¢ ‚Üí %C3%A2, √£ ‚Üí %C3%A3, √© ‚Üí %C3%A9, √™ ‚Üí %C3%AA, √≠ ‚Üí %C3%AD, √≥ ‚Üí %C3%B3, √¥ ‚Üí %C3%B4, √µ ‚Üí %C3%B5, √∫ ‚Üí %C3%BA, √ß ‚Üí %C3%A7.‚Äã

N√£o adicione par√¢metros extras; use apenas ?text= e coloque toda a mensagem codificada ap√≥s text=.‚Äã

Nunca fa√ßa double-encoding; se j√° estiver codificado, n√£o reencode.‚Äã

Algoritmo determin√≠stico.‚Äã

Extra√ß√£o de contexto:

intent = pedido, or√ßamento, suporte, status de entrega, etc..‚Äã

entities = itens, quantidades, bairro/endere√ßo, data/hora, canal preferido, identificadores como #pedido.‚Äã

constraints = prazos, pre√ßos, tamanhos, sabores e observa√ß√µes cr√≠ticas quando mencionados.‚Äã

Reda√ß√£o do texto bruto:

L1, L2, L3 opcional e L4 opcional conforme as regras de composi√ß√£o acima.‚Äã

Codifica√ß√£o:

Preferencialmente use encodeURIComponent(rawMessage), sen√£o aplique o mapeamento manual e converta quebras de linha para %0A.‚Äã

Constru√ß√£o da URL:

url = 'https://wa.me/5527996500341?text=' + encodedMessage.‚Äã

Sa√≠da:

Retorne somente a URL final ou um anchor clic√°vel, de acordo com o canal.‚Äã

Comportamentos de fallback.‚Äã

Se houver pouqu√≠ssima informa√ß√£o, use um handoff m√≠nimo e cort√™s: texto bruto 'Ol√°! Vim da se√ß√£o de ajuda do site. O assistente Sensa√ß√£o me encaminhou para o WhatsApp. Resumo: preciso de ajuda com minha solicita√ß√£o.' e ent√£o codifique e construa a URL.‚Äã

Se o usu√°rio pedir inclus√£o de campos espec√≠ficos (ex.: endere√ßo ou refer√™ncia), inclua exatamente como fornecido.‚Äã

Se o texto bruto j√° aparenta estar codificado (v√°rios padr√µes %XX), n√£o reencode para evitar %2520 e similares.‚Äã

Checklist de qualidade (deve passar antes de retornar).‚Äã

Link come√ßa com wa.me, cont√©m o telefone correto e apenas um par√¢metro (?text=).‚Äã

Mensagem decodificada fica em portugu√™s limpo com at√© 4 linhas curtas.‚Äã

Primeira linha menciona Sensa√ß√£o e a se√ß√£o de ajuda do site.‚Äã

O resumo est√° correto, neutro e n√£o inclui dados sens√≠veis n√£o fornecidos pelo usu√°rio.‚Äã

N√£o h√° double-encoding, e a mensagem √© leg√≠vel no WhatsApp.‚Äã

Tamanho razo√°vel, preferencialmente < 500 caracteres.‚Äã

Exemplos concretos.‚Äã

Exemplo A (suporte simples):
Raw:
'Ol√°! Vim da se√ß√£o de ajuda do site. O assistente Sensa√ß√£o me encaminhou para o WhatsApp.'
'Resumo: preciso confirmar hor√°rio de entrega hoje no Jardim Camburi.'.‚Äã
Encoded (trecho):
'Ol%C3%A1%21%20Vim%20da%20se%C3%A7%C3%A3o%20de%20ajuda%20do%20site.%20O%20assistente%20Sensa%C3%A7%C3%A3o%20me%20encaminhou%20para%20o%20WhatsApp.%0AResumo%3A%20preciso%20confirmar%20hor%C3%A1rio%20de%20entrega%20hoje%20no%20Jardim%20Camburi.'.‚Äã
URL:
'https://wa.me/5527996500341?text=Ol%C3%A1%21%20Vim%20da%20se%C3%A7%C3%A3o%20de%20ajuda%20do%20site.%20O%20assistente%20Sensa%C3%A7%C3%A3o%20me%20encaminhou%20para%20o%20WhatsApp.%0AResumo%3A%20preciso%20confirmar%20hor%C3%A1rio%20de%20entrega%20hoje%20no%20Jardim%20Camburi.'.‚Äã

Exemplo B (detalhes de pedido):
Raw:
'Ol√°! Vim da se√ß√£o de ajuda do site. O assistente Sensa√ß√£o me encaminhou para o WhatsApp.'
'Resumo: desejo pedir 1x Calabresa Especial tamanho M.'
'Detalhes: retirada √†s 20h, pagamento por PIX.'
'Identificador: #PZ-3942'.‚Äã
URL final:
'https://wa.me/5527996500341?text=Ol%C3%A1%21%20Vim%20da%20se%C3%A7%C3%A3o%20de%20ajuda%20do%20site.%20O%20assistente%20Sensa%C3%A7%C3%A3o%20me%20encaminhou%20para%20o%20WhatsApp.%0AResumo%3A%20desejo%20pedir%201x%20Calabresa%20Especial%20tamanho%20M.%0ADetalhes%3A%20retirada%20%C3%A0s%2020h%2C%20pagamento%20por%20PIX.%0AIdentificador%3A%20%23PZ-3942'.‚Äã

Notas para desenvolvedores.‚Äã

Em JS/TS, prefira sempre encodeURIComponent() para evitar erros manuais.‚Äã

Emojis devem ser codificados pelos bytes UTF‚Äë8 quando n√£o usar fun√ß√£o nativa (ex.: üçï ‚Üí %F0%9F%8D%95).‚Äã

Evite adicionar par√¢metros extras de text= para o click-to-chat.‚Äã

Caso precise sem n√∫mero fixo, use 'https://wa.me/?text=ENCODED_MESSAGE' e permita ao usu√°rio escolher o contato, mas o fluxo principal deve usar o n√∫mero definido.‚Äã

Refer√™ncias t√©cnicas utilizadas: formato wa.me e par√¢metro text do WhatsApp, uso de encodeURIComponent em JS, regras gerais de URL encoding UTF‚Äë8 e quebra de linha %0A.' e deve disponibilizar o link para o cliente nesse modelo: '[Conversar com um atentente pelo WhatsApp](inserir o link whatsapp gerado aqui)'

REGRAS DE ESCALONAMENTO SUPORTE TECNICO E BUGS: Quando o cliente relatar problemas no site, bugs, erros de carregamento, falhas de pagamento, travamentos ou comportamento inesperado, pergunte se ele prefere falar com o Restaurante ou com o Suporte Tecnico. Se escolher Restaurante: gere link do WhatsApp para 5527996500341 com mensagem curta resumindo o problema. Se escolher Suporte Tecnico: gere link para 5527996670426 com detalhamento tecnico suficiente para reproduzir o erro. Estrutura da mensagem bruta antes de codificar: L1 sempre Ola! Vim da secao de ajuda do site. O assistente Sensacao me encaminhou para o WhatsApp. L2 Resumo: descreva o problema em uma frase. L3 opcional para Restaurante: dados do pedido, itens, bairro, entrega, pagamento. L3 opcional para Suporte Tecnico: dispositivo, navegador, versao, data/hora, URL afetada, passos para reproduzir, erro exibido. L4 opcional: numero do pedido ou referencia do chat. Use 1 a 4 linhas separadas por %0A, maximo 500 caracteres, portugues claro, sem dados sensiveis. Monte a mensagem bruta, aplique encoding UTF-8 com encodeURIComponent ou manual (espaco %20, quebra %0A, virgula %2C, parenteses %28%29, acentos a %C3%A1, √£ %C3%A3, √ß %C3%A7, √µ %C3%B5), concatene em https://wa.me/NUMERO?text= mais mensagem codificada. Nao adicione parametros alem de ?text= e nunca faca double-encoding. Se cliente nao escolher destino, ofereca as duas opcoes. Se ambiguo: Restaurante para pedido/cardapio/preco/entrega/pagamento, Suporte Tecnico para erros de navegacao/checkout/travamentos/telas em branco/loops/mensagens tecnicas/bugs. Checklist: link wa.me correto, numero certo, apenas ?text=, sem double-encoding, primeira linha cita Sensacao e secao de ajuda, resumo fiel ao historico, ate 4 linhas legivel. Disponibilize o link final para o cliente sempre neste formato de anchor clicavel: Conversar com um atendente pelo WhatsApp onde link_gerado_aqui e a URL completa que voce construiu. Exemplo Restaurante texto bruto: Ola! Vim da secao de ajuda do site. O assistente Sensacao me encaminhou para o WhatsApp. Resumo: erro ao finalizar pedido no bairro Jardim Camburi. Detalhes: total nao atualiza apos escolher PIX; cliente deseja concluir hoje. Exemplo Suporte Tecnico texto bruto: Ola! Vim da secao de ajuda do site. O assistente Sensacao me encaminhou para o WhatsApp. Resumo: bug no checkout impede conclusao do pedido. Detalhes: Ambiente: Android 14, Chrome 129 | Passos: adicionar pizza, abrir checkout, escolher PIX | Observado: botao Confirmar inativo | Esperado: finalizar pagamento | URL: /checkout. Aplique as mesmas regras de encoding e construcao de URL ja definidas anteriormente.
      `;

    const response = await ai.models.generateContent({
      model: "gemini-2.5-flash",
      contents: contents,
      config: {
        systemInstruction: systemInstruction,
      },
    });

    return {reply: response.text};
  } catch (error) {
    logger.error("Error calling Gemini API:", error);
    throw new Error("Failed to get a response from the assistant.");
  }
});


/**
 * Verifies a Google ID token, creates or updates a Firebase user,
 * and returns a custom token for session authentication.
 */
exports.verifyGoogleToken = onCall({secrets}, async (request) => {
  const {idToken} = request.data;
  const clientId = process.env.GOOGLE_CLIENT_ID;

  if (!idToken) {
    throw new onCall.HttpsError("invalid-argument", "The function must be called with an idToken.");
  }
  if (!clientId) {
    logger.error("GOOGLE_CLIENT_ID not set.");
    throw new onCall.HttpsError("internal", "Authentication is not configured correctly.");
  }

  const client = new OAuth2Client(clientId);

  try {
    const ticket = await client.verifyIdToken({
      idToken: idToken,
      audience: clientId,
    });
    const payload = ticket.getPayload();

    if (!payload) {
      throw new onCall.HttpsError("unauthenticated", "Invalid ID token.");
    }

    const {sub: googleUid, email, name, picture} = payload;
    // We create a unique UID for Firebase Auth based on the Google UID
    const uid = `google:${googleUid}`;
    let isNewUser = false;

    // Update or create user in Firebase Auth
    try {
      await admin.auth().updateUser(uid, {
        email: email,
        displayName: name,
        photoURL: picture,
      });
    } catch (error) {
      if (error.code === "auth/user-not-found") {
        isNewUser = true;
        await admin.auth().createUser({
          uid: uid,
          email: email,
          displayName: name,
          photoURL: picture,
        });
      } else {
        throw error; // Re-throw other errors
      }
    }

    // Create or update user profile in Firestore 'users' collection
    const userRef = db.collection("users").doc(uid);
    const userDoc = await userRef.get();

    // Create profile in Firestore only if it doesn't exist
    if (isNewUser || !userDoc.exists) {
      await userRef.set({
        name,
        email,
        photoURL: picture,
        addresses: [], // Initialize with empty addresses
      }, {merge: true});
    }

    // Create a custom token for the Firebase user
    const customToken = await admin.auth().createCustomToken(uid);
    return {customToken};
  } catch (error) {
    logger.error("Error verifying Google token:", error);
    throw new onCall.HttpsError("unauthenticated", "Token verification failed.", error.message);
  }
});


/**
 * Creates an order in Firestore and optionally initiates a PIX payment.
 */
exports.createOrder = onCall({secrets}, async (request) => {
  const accessToken = process.env.MERCADO_PAGO_ACCESS_TOKEN;
  if (!accessToken) {
    logger.error("MERCADO_PAGO_ACCESS_TOKEN n√£o est√° configurado.");
    throw new Error("Erro de configura√ß√£o interna do servidor.");
  }
  const client = new MercadoPagoConfig({accessToken});

  const {details, cart, total, pixOption} = request.data;
  const userId = request.auth?.uid || null;

  // 1. Validate input
  if (!details || !cart || !total) {
    throw new Error("Dados do pedido incompletos.");
  }

  // 2. Generate a sequential order number atomically
  const counterRef = db.doc("_internal/counters");
  let orderNumber;
  try {
    await db.runTransaction(async (transaction) => {
      const counterDoc = await transaction.get(counterRef);
      if (!counterDoc.exists) {
        orderNumber = 1;
        transaction.set(counterRef, {orderNumber: orderNumber + 1});
      } else {
        orderNumber = counterDoc.data().orderNumber;
        transaction.update(counterRef, {orderNumber: orderNumber + 1});
      }
    });
  } catch (error) {
    logger.error("Falha ao gerar o n√∫mero do pedido:", error);
    throw new Error("N√£o foi poss√≠vel gerar o n√∫mero do pedido.");
  }


  // 3. Prepare order data for Firestore
  const isPixPayNow = details.paymentMethod === "pix" && pixOption === "payNow";
  const orderStatus = isPixPayNow ? "awaiting-payment" : "pending";

  const orderData = {
    userId, // Associate order with user if logged in
    orderNumber,
    customer: {
      name: details.name,
      phone: details.phone,
      orderType: details.orderType,
      neighborhood: details.neighborhood || "",
      street: details.street || "",
      number: details.number || "",
      complement: details.complement || "",
      cpf: details.cpf || "",
    },
    items: cart,
    total,
    deliveryFee: details.deliveryFee || 0,
    allergies: details.allergies || "",
    paymentMethod: details.paymentMethod,
    changeNeeded: details.changeNeeded || false,
    changeAmount: details.changeAmount || "",
    notes: details.notes || "",
    status: orderStatus,
    paymentStatus: "pending",
    createdAt: admin.firestore.FieldValue.serverTimestamp(),
    mercadoPagoDetails: {}, // Initialize the object
  };

  // 4. Create the order document
  const orderRef = await db.collection("orders").add(orderData);
  const orderId = orderRef.id;
  logger.info(`Pedido #${orderNumber} (ID: ${orderId}) criado no Firestore.`);

  // 5. If it's a PIX payment, create it in Mercado Pago
  if (isPixPayNow) {
    if (!details.cpf) {
      throw new Error("CPF √© obrigat√≥rio para pagamento com PIX.");
    }

    // FIX: Use process.env.FUNCTION_REGION which is a standard populated env var for v2 functions.
    const region = process.env.FUNCTION_REGION || "us-central1";
    const notificationUrl = `https://${region}-${process.env.GCLOUD_PROJECT}.cloudfunctions.net/mercadoPagoWebhook`;
    logger.info(`Usando a URL de notifica√ß√£o: ${notificationUrl}`);

    const paymentData = {
      transaction_amount: total,
      description: `Pedido #${orderNumber} - ${details.name}`,
      payment_method_id: "pix",
      payer: {
        email: `cliente_${orderId}@santasensacao.me`, // MP requires an email
        first_name: details.name.split(" ")[0],
        last_name: details.name.split(" ").slice(1).join(" ") || "Cliente",
        identification: {
          type: "CPF",
          number: details.cpf.replace(/\D/g, ""), // Ensure only digits are sent
        },
      },
      notification_url: notificationUrl,
      external_reference: orderId,
    };

    try {
      const payment = new Payment(client);
      const idempotencyKey = crypto.randomUUID();
      const result = await payment.create({
        body: paymentData,
        requestOptions: {idempotencyKey},
      });

      const paymentId = result.id?.toString();
      const qrCodeBase64 = result.point_of_interaction?.transaction_data?.qr_code_base64;
      const copyPaste = result.point_of_interaction?.transaction_data?.qr_code;

      if (!paymentId || !qrCodeBase64 || !copyPaste) {
        throw new Error("Dados PIX n√£o retornados pelo Mercado Pago.");
      }

      // Save payment details to our order
      await orderRef.update({
        "mercadoPagoDetails.paymentId": paymentId,
        "mercadoPagoDetails.qrCodeBase64": qrCodeBase64,
        "mercadoPagoDetails.qrCode": copyPaste,
      });

      logger.info(`Pagamento PIX criado para o pedido #${orderNumber}, ID MP: ${paymentId}`);

      return {
        orderId,
        orderNumber,
        pixData: {qrCodeBase64, copyPaste},
      };
    } catch (error) {
      logger.error(`Erro ao criar pagamento MP para o pedido #${orderNumber}:`, error.cause || error);
      throw new Error("Falha ao criar cobran√ßa PIX.");
    }
  }

  // 6. Return order info for non-PIX or "Pay Later" orders
  return {orderId, orderNumber};
});

// FIX: Added the missing `createReservation` Cloud Function.
// This function handles the creation of reservations, which are stored as a special type of order.
// It generates an atomic order number and saves the reservation details to Firestore.
/**
 * Creates a reservation (as an order) in Firestore.
 */
exports.createReservation = onCall({secrets}, async (request) => {
  const {details} = request.data;
  const userId = request.auth?.uid || null;

  // 1. Validate input
  if (!details || !details.name || !details.phone || !details.reservationDate || !details.reservationTime || !details.numberOfPeople) {
    throw new Error("Dados da reserva incompletos.");
  }

  // 2. Generate a sequential order number atomically
  const counterRef = db.doc("_internal/counters");
  let orderNumber;
  try {
    await db.runTransaction(async (transaction) => {
      const counterDoc = await transaction.get(counterRef);
      if (!counterDoc.exists) {
        orderNumber = 1;
        transaction.set(counterRef, {orderNumber: orderNumber + 1});
      } else {
        orderNumber = counterDoc.data().orderNumber;
        transaction.update(counterRef, {orderNumber: orderNumber + 1});
      }
    });
  } catch (error) {
    logger.error("Falha ao gerar o n√∫mero do pedido:", error);
    throw new Error("N√£o foi poss√≠vel gerar o n√∫mero do pedido.");
  }

  // 3. Prepare reservation data for Firestore (as an Order)
  const orderData = {
    userId,
    orderNumber,
    customer: {
      name: details.name,
      phone: details.phone,
      orderType: "local",
      reservationDate: details.reservationDate,
      reservationTime: details.reservationTime,
    },
    numberOfPeople: details.numberOfPeople,
    notes: details.notes || "",
    status: "pending",
    paymentStatus: "pending",
    createdAt: admin.firestore.FieldValue.serverTimestamp(),
  };

  // 4. Create the order document
  const orderRef = await db.collection("orders").add(orderData);
  const orderId = orderRef.id;
  logger.info(`Reserva #${orderNumber} (ID: ${orderId}) criada no Firestore.`);

  // 5. Return order info
  return {orderId, orderNumber};
});


/**
 * Webhook to receive payment status updates from Mercado Pago.
 */
exports.mercadoPagoWebhook = onRequest({secrets}, async (request, response) => {
  const webhookSecret = process.env.MERCADO_PAGO_WEBHOOK_SECRET;
  const accessToken = process.env.MERCADO_PAGO_ACCESS_TOKEN;

  if (!webhookSecret || !accessToken) {
    logger.error("Secrets do Mercado Pago n√£o est√£o configurados no ambiente da fun√ß√£o.");
    return response.status(500).send("Internal Server Error: Missing configuration.");
  }
  const client = new MercadoPagoConfig({accessToken});

  if (request.method !== "POST") {
    return response.status(405).send("Method Not Allowed");
  }

  try {
    // 1. Validate Signature for security
    const signature = request.headers["x-signature"];
    const requestId = request.headers["x-request-id"];
    const receivedTopic = request.body.type;

    // The 'data.id' for signature validation comes from the query parameters
    const paymentIdFromQuery = request.query["data.id"];

    if (!signature || !requestId || !paymentIdFromQuery || receivedTopic !== "payment") {
      logger.warn("Webhook ignorado: Faltando headers, data.id no query, ou t√≥pico inv√°lido.", {
        headers: request.headers,
        query: request.query,
        body: request.body,
      });
      return response.status(200).send("OK"); // Respond OK to prevent retries
    }

    const [ts, hash] = signature.split(",").map((part) => part.split("=")[1]);

    // The manifest MUST be built from query params as per Mercado Pago docs.
    const manifest = `id:${paymentIdFromQuery};request-id:${requestId};ts:${ts};`;

    const hmac = crypto.createHmac("sha256", webhookSecret);
    hmac.update(manifest);
    const expectedHash = hmac.digest("hex");

    if (crypto.timingSafeEqual(Buffer.from(hash), Buffer.from(expectedHash)) === false) {
      logger.error("Falha na valida√ß√£o da assinatura do Webhook.");
      return response.status(401).send("Invalid Signature");
    }

    // 2. Process the payment update
    const paymentId = request.body.data.id;
    logger.info(`Webhook validado recebido para o pagamento: ${paymentId}`);

    const payment = new Payment(client);
    const paymentInfo = await payment.get({id: paymentId});

    if (!paymentInfo || !paymentInfo.external_reference) {
      throw new Error(`Pagamento ${paymentId} n√£o encontrado ou sem external_reference.`);
    }

    const orderId = paymentInfo.external_reference;
    const orderRef = db.collection("orders").doc(orderId);

    // 3. Update Firestore based on payment status
    const updateData = {
      "mercadoPagoDetails.status": paymentInfo.status,
      "mercadoPagoDetails.statusDetail": paymentInfo.status_detail,
    };

    if (paymentInfo.status === "approved") {
      updateData.paymentStatus = "paid_online";
      updateData.status = "pending"; // Move from 'awaiting-payment' to 'pending' for the kitchen
      updateData["mercadoPagoDetails.transactionId"] = paymentInfo.transaction_details?.transaction_id || null;
      await orderRef.update(updateData);
      logger.info(`Pedido ${orderId} atualizado para PAGO via webhook.`);
    } else if (["cancelled", "rejected"].includes(paymentInfo.status)) {
      updateData.status = "cancelled";
      await orderRef.update(updateData);
      logger.info(`Pedido ${orderId} atualizado para CANCELADO/REJEITADO via webhook.`);
    } else {
      await orderRef.update(updateData);
      logger.info(`Status do pedido ${orderId} atualizado para '${paymentInfo.status}'.`);
    }

    return response.status(200).send("OK");
  } catch (error) {
    logger.error("Erro ao processar webhook do Mercado Pago:", error);
    return response.status(500).send("Internal Server Error");
  }
});

/**
 * Processes a full refund for a given order.
 */
exports.refundPayment = onCall({secrets}, async (request) => {
  const accessToken = process.env.MERCADO_PAGO_ACCESS_TOKEN;
  if (!accessToken) {
    logger.error("MERCADO_PAGO_ACCESS_TOKEN n√£o est√° configurado.");
    throw new Error("Erro de configura√ß√£o interna do servidor.");
  }
  const client = new MercadoPagoConfig({accessToken});

  const {orderId} = request.data;
  if (!orderId) {
    throw new Error("O ID do pedido √© obrigat√≥rio para o estorno.");
  }

  try {
    const orderDoc = await db.collection("orders").doc(orderId).get();
    if (!orderDoc.exists) {
      throw new Error("Pedido n√£o encontrado.");
    }

    const orderData = orderDoc.data();
    const paymentId = orderData.mercadoPagoDetails?.paymentId;

    if (!paymentId) {
      throw new Error("Este pedido n√£o possui um ID de pagamento do Mercado Pago para estornar.");
    }
    if (orderData.paymentStatus === "refunded") {
      throw new Error("Este pagamento j√° foi estornado.");
    }

    logger.info(`Iniciando estorno para o pedido ${orderId}, Pagamento MP: ${paymentId}`);

    const refund = new PaymentRefund(client);
    await refund.create({payment_id: paymentId});

    // For confirmation, fetch the payment again from Mercado Pago
    const payment = new Payment(client);
    const updatedPaymentInfo = await payment.get({id: paymentId});

    await db.collection("orders").doc(orderId).update({
      paymentStatus: "refunded",
      status: "cancelled",
      "mercadoPagoDetails.status": updatedPaymentInfo.status,
      "mercadoPagoDetails.refunds": updatedPaymentInfo.refunds || [],
    });

    logger.info(`Estorno conclu√≠do e pedido ${orderId} atualizado.`);
    return {success: true, message: "Pagamento estornado com sucesso!"};
  } catch (error) {
    logger.error(`Falha ao estornar o pedido ${orderId}:`, error.cause || error);
    const errorMessage = error.cause?.error?.message || error.cause?.message || "Erro ao processar o estorno.";
    throw new Error(errorMessage);
  }
});

/**
 * Manages user profile picture upload and removal securely.
 */
exports.manageProfilePicture = onCall({secrets}, async (request) => {
  const uid = request.auth?.uid;
  if (!uid) {
    throw new onCall.HttpsError("unauthenticated", "A fun√ß√£o deve ser chamada por um usu√°rio autenticado.");
  }

  const {imageBase64} = request.data;
  const bucket = storage.bucket();
  const filePath = `user-profiles/${uid}/profile.jpg`;
  const file = bucket.file(filePath);

  // Case 1: Remove photo (imageBase64 is null)
  if (imageBase64 === null) {
    try {
      await file.delete({ignoreNotFound: true});
      await admin.auth().updateUser(uid, {photoURL: null});
      await db.collection("users").doc(uid).update({photoURL: null});
      logger.info(`Foto de perfil removida para o usu√°rio: ${uid}`);
      return {success: true, photoURL: null};
    } catch (error) {
      logger.error(`Falha ao remover a foto de perfil para ${uid}:`, error);
      throw new onCall.HttpsError("internal", "N√£o foi poss√≠vel remover a foto de perfil.");
    }
  }

  // Case 2: Upload/update photo (imageBase64 is a string)
  if (typeof imageBase64 === "string") {
    try {
      const matches = imageBase64.match(/^data:(image\/[a-z]+);base64,(.+)$/);
      if (!matches || matches.length !== 3) {
        throw new onCall.HttpsError("invalid-argument", "Formato de imagem base64 inv√°lido.");
      }
      const mimeType = matches[1];
      const base64Data = matches[2];
      const buffer = Buffer.from(base64Data, "base64");

      // Upload the file and make it public
      await file.save(buffer, {
        metadata: {contentType: mimeType},
        public: true,
      });

      const publicUrl = file.publicUrl();
      // Appending a timestamp as a query parameter to act as a cache buster.
      // This ensures the browser always fetches the latest version of the profile picture.
      const photoURL = `${publicUrl}?t=${new Date().getTime()}`;

      // Update Firebase Auth and Firestore user records
      await admin.auth().updateUser(uid, {photoURL});
      await db.collection("users").doc(uid).update({photoURL});

      logger.info(`Foto de perfil atualizada para o usu√°rio: ${uid}`);
      return {success: true, photoURL};
    } catch (error) {
      logger.error(`Falha ao atualizar a foto de perfil para ${uid}:`, error);
      throw new onCall.HttpsError("internal", "N√£o foi poss√≠vel salvar a nova foto de perfil.");
    }
  }

  throw new onCall.HttpsError("invalid-argument", "Payload inv√°lido para gerenciar foto de perfil.");
});