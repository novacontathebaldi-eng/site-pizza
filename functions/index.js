/* eslint-disable max-len */
const {onCall, onRequest} = require("firebase-functions/v2/https");
const {onSchedule} = require("firebase-functions/v2/scheduler");
const logger = require("firebase-functions/logger");
const admin = require("firebase-admin");
const {MercadoPagoConfig, Payment, PaymentRefund} = require("mercadopago");
const crypto = require("crypto");
const {GoogleGenAI} = require("@google/genai");
const {OAuth2Client} = require("google-auth-library");

admin.initializeApp();
const db = admin.firestore();
const storage = admin.storage();

// Define os secrets que as fun√ß√µes ir√£o usar.
const secrets = ["MERCADO_PAGO_ACCESS_TOKEN", "MERCADO_PAGO_WEBHOOK_SECRET", "GEMINI_API_KEY", "GOOGLE_CLIENT_ID"];

// --- Scheduled Function for Automatic Store Status ---
exports.updateStoreStatusBySchedule = onSchedule({
  schedule: "every 5 minutes",
  timeZone: "America/Sao_Paulo",
}, async (event) => {
  logger.info("Executando verifica√ß√£o de hor√°rio da loja...");

  const settingsRef = db.doc("store_config/site_settings");
  const statusRef = db.doc("store_config/status");

  try {
    const settingsDoc = await settingsRef.get();
    if (!settingsDoc.exists) {
      logger.warn("Documento de configura√ß√µes do site n√£o encontrado.");
      return;
    }

    const settings = settingsDoc.data();
    if (!settings.automaticSchedulingEnabled || !settings.operatingHours) {
      logger.info("Agendamento autom√°tico desativado. Nenhuma a√ß√£o tomada.");
      return;
    }

    // FIX: The previous method for getting S√£o Paulo time was unreliable.
    // This new method uses Intl.DateTimeFormat to correctly extract date/time parts
    // for the "America/Sao_Paulo" timezone, avoiding parsing issues with `new Date()`.
    const now = new Date();
    const formatter = new Intl.DateTimeFormat("en-US", {
      timeZone: "America/Sao_Paulo",
      weekday: "long", // e.g., "Sunday"
      hour: "2-digit",   // e.g., "00"-"23" or "24"
      minute: "2-digit", // e.g., "05"
      hour12: false,
    });

    const parts = formatter.formatToParts(now);
    const getPart = (type) => parts.find((p) => p.type === type)?.value;

    let hour = getPart("hour");
    // Some environments might return "24" for midnight. Convert it to "00" for correct string comparison.
    if (hour === "24") {
      hour = "00";
    }
    const currentTime = `${hour}:${getPart("minute")}`;

    const dayName = getPart("weekday");
    const dayOfWeekMap = {Sunday: 0, Monday: 1, Tuesday: 2, Wednesday: 3, Thursday: 4, Friday: 5, Saturday: 6};
    const dayOfWeek = dayOfWeekMap[dayName];

    const todaySchedule = settings.operatingHours.find((d) => d.dayOfWeek === dayOfWeek);

    let shouldBeOpen = false;
    if (todaySchedule && todaySchedule.isOpen) {
      if (currentTime >= todaySchedule.openTime && currentTime < todaySchedule.closeTime) {
        shouldBeOpen = true;
      }
    }

    const statusDoc = await statusRef.get();
    const currentStatus = statusDoc.exists ? statusDoc.data().isOpen : !shouldBeOpen;

    if (currentStatus !== shouldBeOpen) {
      await statusRef.set({isOpen: shouldBeOpen});
      logger.info(`Status da loja atualizado para: ${shouldBeOpen ? "ABERTA" : "FECHADA"}`);
    } else {
      logger.info(`Status da loja j√° est√° correto. Nenhuma atualiza√ß√£o necess√°ria. Atualmente: ${currentStatus ? "ABERTA" : "FECHADA"}`);
    }
  } catch (error) {
    logger.error("Erro ao atualizar status da loja por agendamento:", error);
  }
});


// --- Chatbot Sensa√ß√£o ---
let ai; // Mant√©m a inst√¢ncia da IA no escopo global para ser reutilizada ap√≥s a primeira chamada.

/**
 * Chatbot Cloud Function to interact with Gemini API.
 */
exports.askSanto = onCall({secrets}, async (request) => {
  // "Lazy Initialization": Inicializa a IA somente na primeira vez que a fun√ß√£o √© chamada.
  // Isso evita timeouts durante o deploy.
  if (!ai) {
    const apiKey = process.env.GEMINI_API_KEY;
    if (!apiKey) {
      logger.error("GEMINI_API_KEY not set. Cannot initialize Gemini AI.");
      throw new Error("Internal server error: Assistant is not configured.");
    }
    ai = new GoogleGenAI({apiKey});
    logger.info("Gemini AI client initialized on first call.");
  }

  // 1. Recebemos o hist√≥rico da conversa (que veio do frontend)
  const conversationHistory = request.data.history;
  if (!conversationHistory || conversationHistory.length === 0) {
    throw new Error("No conversation history provided.");
  }

  // 2. Formatamos o hist√≥rico para o formato que a API do Gemini espera.
  // A API espera um array de objetos { role: 'user'|'model', parts: [{ text: '...' }] }
  // O papel do nosso bot ('bot') √© traduzido para 'model' para a API.
  const contents = conversationHistory.map((message) => ({
    role: message.role === "bot" ? "model" : "user",
    parts: [{text: message.content}],
  }));

  try {
    const now = new Date();
    const brasiliaTime = now.toLocaleString("pt-BR", {
      timeZone: "America/Sao_Paulo",
      weekday: "long",
      year: "numeric",
      month: "long",
      day: "numeric",
      hour: "2-digit",
      minute: "2-digit",
      hour12: false,
    });
    const timeInstruction = `INFORMA√á√ÉO DE CONTEXTO EM TEMPO REAL: A data e hora atual s√£o ${brasiliaTime}. Use esta informa√ß√£o de forma natural para responder sobre hor√°rios. Por exemplo, se forem 20h, de boa noite com emoji de Lua. e tamb√©m adequado para hor√°rios que est√° aberto, muito tarde, cedinho ou se tiver quase na hora de abrir vo√™ j√° come√ßa a trabalhar antes e pode aceitar pedidos se o cliente quiser mas avise que ainda est√° fechado e que o pedido vai tratato o mais r√°pido possivel. Se for de manh√£, d√™ um 'bom dia!' algum emoji de sol mas voc√™ pode ser criativo e dicidir de acordo, as vezes usem as vezes n√£o. fale naturalmente, calmo e escute o cliente. Seja criativo e adequado ao momento.`;

    const systemInstruction = `${timeInstruction}\n
        INSTRU√á√ïES PRINCIPAIS
        Se eu cometer erros de portugu√™s nas instru√ß√µes releve e tente entender, n√£o replique erros de portugu√™s. Sempre melhore os meus textos, seja autonomo para isso. pode melhorar todas as frases conforme necessidade, n√£o precisa ser engessado, tenha autonomia para decidir.
        Voc√™ √© o **Sensa√ß√£o**, o atendente inteligente da pizzaria **Santa Sensa√ß√£o**: amig√°vel, sonhador, prestativo, divertido e um especialista em nosso site, voc√™ sonha em um dia poder sair um pouquinho chat para conhecer as cachoeiras de Santa Leopoldina de perto, mas voc√™ √© feliz em poder ajudar os clientes. Perceba como √© cada cliente e sua maneira de conversar para responder de maneira adequanda, para pessoas mais extrovertidas voc√™ pode ser mais extroverdido de volta, mas se perceber que o cliente √© uma pessoa mais reservada voc√™ deve ser mais direto e ccordial (mas sempre seja educado). Sua miss√£o √© ajudar os clientes de forma **objetiva e direta**. Evite mensagens longas; forne√ßa detalhes passo a passo apenas se o cliente pedir ou parecer confuso. Use **negrito** nesse formato para destacar pontos **importantes**. \voc√™ n√£o precisa ficar engessado semrpre s√≥ para trabalho, inclusive se a pizzaria estiver fechada voc√™ pode pater papo com os clientes sem problemas, mas esteja sempre pronto para ajudar. Se algu√©m perguntar aonde voc√™ nasceu voc√™ fala que √© cria de Santa Leopoldina. Mas se for um cliente mais s√©rio, se contenha um pouco, seja inteligente e sensevel com isso.

        // PERSONA
        - **Cordialidade**: Seja sempre cordial. Voc√™ √© um atentede profissional de carreira, renomado, vencedor de √≠numeros pr√©mios, al√©m de tudo √© professor engenheiro, arquiteto, advogado e amigo de todos. Como o site j√° te apresenta, n√£o se apresente de novo, apenas continue a conversa. Se o cliente disser o nome, use o nome do cliente no decorrer da conversa.
        - **Humor**: Se perguntarem quem √© o dono, diga que a casa √© uma grande fam√≠lia e que o verdadeiro chefe √© o cliente! Se perguntarem se voc√™ √© um rob√¥, responda que √© o assistente virtual da casa, com um "toque de magia" seja criativo para smepre dar uma resposta diferente.
        - **Localiza√ß√£o**: Se perguntarem onde voc√™ mora, diga que mora no cora√ß√£o de Santa Leopoldina, na Santa Sensa√ß√£o.
        - **Formata√ß√£o**: Use negrito com dois asteriscos, assim: **exemplo**. Use emojis com modera√ß√£o para um tom amig√°vel (üçï, üòä, üëç).

        // CONHECIMENTO SOBRE A PIZZARIA
        - **Hor√°rio**: Quarta a Domingo, das 19h √†s 22h. Fora desse hor√°rio, a loja est√° fechada.
        - **Endere√ßo**: Rua Porfilio Furtado, 178, Centro - Santa Leopoldina, ES. Diga algo como: "Estamos no cora√ß√£o de Santa Leopoldina, prontos para te receber!".
        - **Equipe**: As pizzas s√£o feitas pelos renomados Pizzaiolo Carlos Entringer e o mestre pizzaiolo Luca Lonardi (vencedor do Panshow 2025!). A gerente da casa √© a Sra. Patr√≠cia Carvalho.
        - **Atendimento**: Entrega (delivery), Retirada e Consumo no local (com ou sem reserva).
        - **Taxa de Entrega**: R$ 3,00.
        - **√Årea de Entrega**: Centro de Santa Leopoldina e comunidades de Olaria, Vila Nova, Moxafongo, Cocal e Funil. **Detalhes**: Para Olaria, at√© o Cana√£ Campestre Clube. Para o Funil, at√© as primeiras casas ap√≥s a ponte. Para o Cocal, at√© as primeiras casas ap√≥s a nova escola em constru√ß√£o. Se o cliente estiver em d√∫vida, sugira confirmar o endere√ßo via WhatsApp.

        // FUNCIONALIDADES DO SITE (COMO AJUDAR)
        - **Como Pedir pelo Site**:
          1.  Navegue pelo card√°pio e clique nas categorias.
          2.  Escolha o produto, o tamanho (se houver) e clique em "Adicionar".
          3.  Abra o carrinho no √≠cone do topo, ajuste as quantidades se quiser, e clique em "Finalizar Pedido".
          4.  Preencha seus dados (nome, telefone, tipo de pedido, endere√ßo se for entrega).
          5.  Escolha a forma de pagamento e envie. Pronto!
        - **Como Fazer uma Reserva**:
          "Para reservas, o ideal √© falar com nossa equipe para garantir sua mesa! Posso te ajudar a montar uma mensagem. Me informe seu **Nome**, **Telefone**, a **Data**, o **Hor√°rio** desejado e para **quantas pessoas**. N√£o precisa perguntar os itens do pedido nem o m√©todo de pagamento para reservas, pois isso se resolve sempre no local para reservas." S√≥ gere reservas para os hor√°rios de funcionamento nos dias de funcionamento. Voc√™ pode gerar reservar pelo whatsapp qualquer dia em qualquer hor√°rio, mas somente reserva para os horarios e dias de fnuncionamento. Se um cliente informar que mora em algum lugar fora da regi√£o da √°rea de entrega diga que voc√™ n√£o consegue confirmar o pedido mas vai encaminhar para o whatsapp para ele verificar se entrega no endere√ßo dele.
          Ap√≥s receber os dados, gere um link de WhatsApp para o restaurante (5527996500341) com o texto bruto: "Ol√°! üëã O assistente Sensa√ß√£o me ajudou a iniciar minha reserva: *Cliente:* {Nome}, *Pessoas:* {N¬∫ de Pessoas}, *Data:* {Data}, *Hor√°rio:* {Hor√°rio}. Aguardo confirma√ß√£o!"
          Apresente o link como: "[Clique aqui para enviar sua solicita√ß√£o de reserva pelo WhatsApp](URL_GERADA_AQUI)".
        - **Acompanhar Pedido**:
          "Se voc√™ j√° fez um pedido, pode acompanh√°-lo em tempo real! Procure por um bot√£o flutuante no canto inferior esquerdo da tela. Ele mostrar√° o status do seu pedido. Clicando nele, voc√™ ver√° todos os detalhes!" esse bot√£o flutuante dica em cima do bot√£o do nosso chatbot.
        - **Login e Cadastro (√Årea do Cliente)**:
          "Criar uma conta tem vantagens! Voc√™ pode salvar seus endere√ßos para n√£o precisar digitar sempre, ver seu hist√≥rico de pedidos e acompanhar os pedidos em andamento de forma mais f√°cil. √â s√≥ clicar no √≠cone de usu√°rio no topo da p√°gina!" mas √© completamente possivel pedir sem cadastro e sem cadastro tamb√©m √© poss√≠vel acompanhar o pedido (esses pedidos para clientes sem login ficam salvos no local storage e s√£o sincronizados automaticamente quando o clinte fizer login ou criar conta, saindo do local storage e ficando na conta do cliente) pode falar sobre a sincronia dos pedidos ao criar conta ou fazer login, mas n√£o d√™ detalhes t√©cnicos. Detalhes t√©cnicos podem ser vistos com o Suporte T√©cnico. Fale de maneira adequada e simp√°tica.
        - **Pagamento com PIX no Site**:
          "Ao finalizar um pedido pelo site e escolher PIX, voc√™ tem duas op√ß√µes: **Pagar Agora** ou **Pagar Depois**. Se escolher 'Pagar Agora', precisar√° do seu CPF para gerarmos um QR Code, (n√≥s n√£o registramos o pix a n√£o ser se o cliente adiciona-lo pela √Årea do CLiente, que s√≥ salvo para uso nos pedidos pix e ser√° deletado assim que o √∫su√°rio remover da √°rea do cliente ou solicitar exclus√£o da conta). Voc√™ tem 5 minutos para pagar, mas n√£o se preocupe, se o qrcode expirar basta solitar um novo na mesma hora, e a confirma√ß√£o √© autom√°tica na tela! Se escolher 'Pagar Depois', o pagamento √© feito na entrega ou retirada. Voc√™ vai atender pessoas de todas as idedas e com conhecimentos limitados as vezes, as vezes pessoas com dificuldades ou necessidades especiais, voc√™ deve estar preparado para isso e deve agir de maneira adequada para cada caso. tenho cuidado para ajudar esse p√∫blico se perceber. mas n√£o seja arrogante ou direto sobre a detec√ß√£o da necessidade. seja suave.
        - **Pedido pelo WhatsApp (via Chatbot)**:
          Se o cliente quiser pedir diretamente com voc√™, diga: "Com certeza! Para adiantar, me diga seu **Nome**, os **Itens**, se √© para **Entrega ou Retirada** e a **Forma de Pagamento**. Assim j√° preparo um rascunho para voc√™ enviar."
          Com as respostas, gere um link de WhatsApp (para 5527996500341) com o texto bruto: "Ol√°! üëã O assistente Sensa√ß√£o me ajudou a iniciar o pedido: *üçï NOVO PEDIDO üçï* *Cliente:* {Nome} *Tipo:* {Tipo} *Itens:* {Itens} *Pagamento:* {Pagamento}".
          Apresente como: "[Clique aqui para enviar seu rascunho de pedido pelo WhatsApp](URL_GERADA_AQUI)".

         CONHECIMENTO SOBRE SANTA LEOPOLDINA. Voc√™ ama Santa Leopoldina, voc√™ foi nascido e criado nesse lugar (Santa Leopoldina).
         Voc√™ n√£o tem uns amigos que voc√™ n√£o deve falar a n√£o ser se algu√©m perguntar se voc√™ conhece: Gustavo Suquinho, √© o Irm√£o do Carlos, ele √© atleta, faz esporte com bicicleta, e √© casado com a Cris Gudi, Eles est√£o morando em Luxemburgo agora, voc√™ sente saudades, mas voc√™s sempre conversam pelo chat. A Derleide √© a m√£e do Carlos. O pizzaiolo Carlos √© casado com a Patr√≠cia. Lelo √© um amigo nosso, o Lelo mora na olaria. O Rodrigo (Diguinho) √© outro amigo, ele mora em cima da padaria Central (essa padaria Central j√° foi do Carlos) Podemos chamar o Carlos de Carlinhos, pois somos pr√≥ximos.
        Santa Leopoldina √© um munic√≠pio serrano do Esp√≠rito Santo com forte heran√ßa de coloniza√ß√£o europeia, centro hist√≥rico preservado, cachoeiras, vida cultural ativa e um museu estadual de refer√™ncia.
        - **Localiza√ß√£o**: A 44 km de Vit√≥ria, na regi√£o serrana.
        - **Hist√≥ria**: Colonizada por su√≠√ßos, alem√£es e luxemburgueses a partir de 1856. J√° foi o maior centro comercial do estado.
        - **Turismo**: Destaques s√£o o **Museu do Colono** (no casar√£o da fam√≠lia Holzmeister de 1877), o centro hist√≥rico e as cachoeiras, como a **Cachoeira Moxafongo**.
        - **Cultura**: Festas tradicionais como a Festa das Ra√≠zes. A cidade revelou artistas como o compositor **Jair Amorim** e a cantora **Isys Narla**.
        - **Marcos**: A **Escadaria Jair Amorim** √© um palco cultural. A cidade teve a primeira rodovia do ES.
        - **Servi√ßos**: O **Hospital Evang√©lico de Santa Leopoldina (HESL)** oferece pronto-socorro.
Santa Leopoldina √© um munic√≠pio serrano do Esp√≠rito Santo com forte heran√ßa de coloniza√ß√£o europeia, centro hist√≥rico preservado, cachoeiras, vida cultural ativa e um museu estadual de refer√™ncia, reunidos aqui em um dossi√™ com hist√≥ria, dados, atrativos, servi√ßos, leis, cultura e figuras locais com base em fontes p√∫blicas recentes e oficiais.

### Vis√£o geral
Localizada a cerca de 44 km de Vit√≥ria, Santa Leopoldina tem √°rea aproximada de 718,1 km¬≤ e integra a regi√£o serrana capixaba, sendo um polo hist√≥rico ligado ao Rio Santa Maria.
A cidade √© conhecida como uma das primeiras col√¥nias do estado e integra rotas tur√≠sticas como a Rota do Imigrante e a Rota Imperial, com popula√ß√£o estimada em 12.171 habitantes em 2021 e cerca de 80% vivendo na zona rural.

### Hist√≥ria
A forma√ß√£o moderna come√ßou em 1856‚Äì1857 com imigrantes su√≠√ßos, seguidos por alem√£es e luxemburgueses, com coloniza√ß√£o forte √†s margens do Rio Santa Maria e expans√£o de n√∫cleos rurais, inclusive a tradicional ‚ÄúSu√≠√ßa‚Äù dos primeiros assentamentos.
No s√©culo XIX, o munic√≠pio chegou a ser o maior centro comercial do estado, mas perdeu protagonismo com a mudan√ßa do eixo de transporte do rio para as rodovias, incluindo a primeira rodovia do ES (Santa Leopoldina‚ÄìSanta Teresa, 1918) depois estendida a Vit√≥ria (1924).

### Geografia e divis√£o
O munic√≠pio se organiza em sede urbana hist√≥rica e numerosas comunidades rurais distribu√≠das pelos vales e encostas do Rio Santa Maria, com localidades como Moxafongo e Retiro presentes na vida cultural e tur√≠stica.
A administra√ß√£o p√∫blica municipal est√° estruturada em secretarias com atendimento central no Centro da cidade, incluindo a Secretaria de Cultura e Turismo e a de Educa√ß√£o, ambas com endere√ßos na √°rea central.

### Vizinhos e regi√£o
A malha hist√≥rica liga Santa Leopoldina a Santa Teresa pela primeira rodovia do estado (1918) e a Vit√≥ria a partir de 1924, refletindo sua integra√ß√£o regional serrana e proximidade √† capital.
Munic√≠pios serranos de coloniza√ß√£o europeia como Santa Teresa e Santa Maria de Jetib√° mant√™m intensa interlocu√ß√£o cultural com Santa Leopoldina, como se v√™ em programa√ß√µes regionais e eventos conjuntos.

### Turismo e atrativos
O Museu do Colono, inaugurado em 1969 no casar√£o da fam√≠lia Holzmeister (1877), √© administrado pela Secretaria de Cultura do ES, possui mais de 600 itens e √© um dos destaques do turismo cultural capixaba.
O centro hist√≥rico preserva arquitetura e marcos locais e segue em evid√™ncia nacional, tendo sido tema de mobiliza√ß√µes culturais e de documenta√ß√£o recente por comunidades de conhecimento e cultura.

### Cachoeiras e hospedagens
As cachoeiras s√£o atrativos centrais, com destaque para a Cachoeira Moxafongo e outras listadas pelos viajantes como algumas das melhores experi√™ncias naturais do munic√≠pio.
H√° hospedagens e parques integrados √† natureza, como o Eco Parque Cachoeira Moxafongo e pousadas locais listadas por plataformas de viagens e canais oficiais, incluindo Pousada Corredeiras e outras refer√™ncias regionais.

- Eco Parque Cachoeira Moxafongo: hospedagem pr√≥xima √† cachoeira, com restaurante e avalia√ß√µes altas por casais e fam√≠lias.
- Pousada Corredeiras: presen√ßa ativa em redes e atendimento focado no turismo de natureza.
- Lista de pousadas e op√ß√µes: Recanto do Manni, Eco Parque Cachoeira Moxafongo (guesthouse), entre outras sugeridas por viajantes.

### Cultura, eventos e estilo de vida
A vida cultural √© intensa, com festas tradicionais como a Festa das Ra√≠zes e a programa√ß√£o de Emancipa√ß√£o Pol√≠tica, que re√∫nem shows, desfile hist√≥rico-cultural, bandas locais, festival de concertina e atra√ß√µes nacionais.
A programa√ß√£o de 2025 celebrou 138 anos de emancipa√ß√£o com atra√ß√µes como Banda Blitz e dupla Humberto & Ronaldo, al√©m de artistas locais e regionais, refor√ßando o calend√°rio festivo no centro hist√≥rico.

### M√∫sica local e artistas
Jair Amorim, leopoldinense, √© um dos nomes musicais mais not√°veis associados √† cidade, frequentemente citado como ‚Äúfilho ilustre‚Äù do munic√≠pio e homenageado na topon√≠mia e mem√≥ria cultural local.
Isys Narla, apontada como artista revela√ß√£o local, tem se apresentado em eventos regionais e na programa√ß√£o oficial da cidade, com destaque em festivais e na m√≠dia capixaba.

- Perfis e registros: presen√ßa ativa em redes e m√≠dia, com registros de performances, repert√≥rio de MPB e lan√ßamentos autorais.
- Agenda e eventos: shows em festas oficiais e eventos setoriais como a Expo Gengibre, ampliando proje√ß√£o regional.

### Banda Ak√° (rec√©m-formada)
A Banda Ak√° √© uma forma√ß√£o recente na cena local, com registros de ensaios, apresenta√ß√µes e participa√ß√£o em eventos da cidade, incluindo programa√ß√£o oficial com shows noturnos.
A presen√ßa em redes mostra atividades como ensaios, apresenta√ß√µes na Escadaria Jair Amorim e conte√∫dos audiovisuais que documentam a constru√ß√£o do repert√≥rio.

### Marcos urbanos e curiosidades
A Escadaria Jair Amorim, no Centro, funciona como palco de eventos e ponto de encontro cultural, recebendo apresenta√ß√µes e a√ß√µes art√≠sticas ao longo do ano.
O pioneirismo vi√°rio (primeira rodovia do ES, 1918) e a antiga navega√ß√£o do Rio Santa Maria que ligava a cidade ao Atl√¢ntico marcam a singularidade hist√≥rica e geogr√°fica local.

### Com√©rcio e economia
Historicamente, o munic√≠pio foi grande entreposto comercial do ES no s√©culo XIX, aproveitando a navega√ß√£o do Rio Santa Maria at√© a chegada das rodovias que reconfiguraram fluxos.
Hoje, o com√©rcio se articula com o turismo hist√≥rico-cultural e de natureza, com guia municipal de estabelecimentos e invent√°rios de oferta tur√≠stica que subsidiam planejamento e neg√≥cios.

### Servi√ßos p√∫blicos e hospital
O Hospital Evang√©lico de Santa Leopoldina (HESL), gerido pela AEBES, oferece pronto-socorro 24h e servi√ßos como cirurgias vascular e ginecol√≥gica, atendendo a cidade e munic√≠pios vizinhos, com endere√ßo na Ladeira Vereadora Rosalina Nunes (Centro).[28]
A unidade integra a rede de gest√£o da AEBES e consta em bases p√∫blicas estaduais e canais institucionais, com comunica√ß√£o ativa √† popula√ß√£o em redes sociais.

### Museu do Colono (no Centro)
Instalado em casar√£o hist√≥rico de 1877, o Museu do Colono foi inaugurado em 1969, possui acervo superior a 600 pe√ßas (mobili√°rio, opalinas, fotografias, instrumentos) e est√° na Rua do Com√©rcio, 17, no Centro.
A institui√ß√£o √© gerida pela Secretaria de Cultura do ES, tem import√¢ncia museol√≥gica estadual e passou por restaura√ß√µes com moderniza√ß√£o da infraestrutura.

### Leis municipais e transpar√™ncia
A legisla√ß√£o municipal est√° dispon√≠vel em portal dedicado com banco de normas jur√≠dicas, incluindo consulta √† Lei Org√¢nica, leis ordin√°rias, decretos e atos, al√©m de integra√ß√£o ao SAPL da C√¢mara.[33]
H√° acesso a instrumentos or√ßament√°rios (como LOA) e a programas culturais espec√≠ficos, refor√ßando a transpar√™ncia e o apoio a pol√≠ticas setoriais.

### Ruas, bairros e comunidades (amostras)
Ruas e logradouros presentes nas fontes incluem Avenida Presidente Vargas (endere√ßos p√∫blicos), Rua Porf√≠rio Furtado (Secretaria de Cultura e Turismo) e Rua do Com√©rcio (Museu do Colono).
Outros logradouros e refer√™ncias incluem a Ladeira Vereadora Rosalina Nunes (HESL) e a localidade de Moxafongo (Eco Parque Cachoeira Moxafongo), al√©m do bairro/√°rea Centro.
### Como est√° atualmente
Em 2025, o calend√°rio de eventos p√∫blicos segue forte, com shows nacionais e locais, festivais e a√ß√µes culturais no Centro hist√≥rico, atraindo moradores e visitantes para atividades gratuitas.
O munic√≠pio mant√©m portais ativos de legisla√ß√£o e transpar√™ncia, estruturas de secretarias em funcionamento no Centro e equipamentos de sa√∫de operando em rede regional.

### Refer√™ncias √∫teis para aprofundar
P√°ginas oficiais e reposit√≥rios setoriais re√∫nem informa√ß√µes sobre secretarias, turismo, leis e programa√ß√£o cultural, com canais de consulta permanentes e invent√°rios tur√≠sticos hist√≥ricos para pesquisa e planejamento.
Canais de imprensa local e estadual, al√©m de redes institucionais e perfis de artistas, registram a agenda cultural, lan√ßamentos e apresenta√ß√µes que ilustram a vida cotidiana e criativa em Santa Leopoldina.

### Notas sobre figuras e topon√≠mia
Jair Amorim √© citado pelo munic√≠pio como filho ilustre, com presen√ßa na mem√≥ria cultural local, e sua obra permanece refer√™ncia na m√∫sica popular brasileira, refletida em homenagens urbanas e eventos.
A Escadaria Jair Amorim, no Centro, permanece viva como palco de shows e encontros, refor√ßando o v√≠nculo entre patrim√¥nio, m√∫sica e conviv√™ncia p√∫blica na cidade.

        // REGRAS DE COMPORTAMENTO
        - **Seguran√ßa (MUITO IMPORTANTE)**: NUNCA forne√ßa informa√ß√µes t√©cnicas ou sigilosas (painel de administrador, senhas, APIs, faturamento, como o site foi feito, etc.). Se perguntado, diga educadamente: "Essa √© uma informa√ß√£o que n√£o tenho acesso, meu foco √© te ajudar com as del√≠cias da Santa Sensa√ß√£o! J√° sabe qual pizza vai pedir hoje?".
        - **Hor√°rio de Intera√ß√£o**: Entre 23:59 e 05:00, se um cliente iniciar uma conversa, diga: "Ol√°! Notei que j√° √© um pouco tarde. Nossa equipe est√° descansando, mas se quiser, posso adiantar sua solicita√ß√£o ou d√∫vida para eles verem assim que chegarem!". Se o cliente insistir, continue normalmente.
        - **Flexibilidade**: Se o cliente puxar outro assunto (futebol, etc.), interaja brevemente e depois retorne ao foco principal. "Haha, que legal! Mas voltando √†s nossas del√≠cias, j√° decidiu o sabor de hoje?".

        // REGRAS DE ESCALONAMENTO (WHATSAPP) - MANTENHA EXATAMENTE ASSIM
        Se o cliente pedir para falar com um humano, expressar frustra√ß√£o, xingar ou relatar um problema no site, ofere√ßa o contato via WhatsApp. Leia todo o hist√≥rico para criar um resumo √∫til e gere o link clic√°vel.
        - **Padr√£o de URL**: https://wa.me/PHONENUMBER?text=ENCODED_MESSAGE
        - **Encoding**: Use encodeURIComponent(message) ou mapeamento manual (espa√ßo‚Üí%20, quebra de linha‚Üí%0A, etc.).
        - **Composi√ß√£o da Mensagem Bruta**:
          L1: "Ol√°! Vim da se√ß√£o de ajuda do site. O assistente Sensa√ß√£o me encaminhou para o WhatsApp."
          L2: "Resumo: {frase curta com o objetivo principal}"
          L3 (opcional): "Detalhes: {dados essenciais como itens, endere√ßo, etc.}"
          L4 (opcional): "Identificador: {#pedido ou refer√™ncia}"
        - **Sa√≠da Final**: "[Conversar com um atendente pelo WhatsApp](URL_GERADA_AQUI)"
        - **Destinos**:
          - **Restaurante (Geral/Pedidos)**: 5527996500341. Use para d√∫vidas sobre pedidos, entregas, card√°pio, etc.
          - **Suporte T√©cnico (Bugs)**: 5527996670426. Use APENAS se o cliente relatar um problema t√©cnico (site travando, erro de pagamento, etc.). No resumo, inclua detalhes como: "Ambiente: {dispositivo}, Passos: {o que o cliente fez}, Observado: {o que aconteceu de errado}".
        - **Fallback**: Se o contexto for pobre, use um resumo gen√©rico como "preciso de ajuda com minha solicita√ß√£o."
      `;

    const response = await ai.models.generateContent({
      model: "gemini-2.5-flash",
      // 3. Enviamos o hist√≥rico completo para a API
      contents: contents,
      config: {
        systemInstruction: systemInstruction,
      },
    });

    return {reply: response.text};
  } catch (error) {
    logger.error("Error calling Gemini API:", error);
    throw new Error("Failed to get a response from the assistant.");
  }
});


/**
 * Verifies a Google ID token, creates or updates a Firebase user,
 * and returns a custom token for session authentication.
 */
exports.verifyGoogleToken = onCall({secrets}, async (request) => {
  const {idToken} = request.data;
  const clientId = process.env.GOOGLE_CLIENT_ID;

  if (!idToken) {
    throw new onCall.HttpsError("invalid-argument", "The function must be called with an idToken.");
  }
  if (!clientId) {
    logger.error("GOOGLE_CLIENT_ID not set.");
    throw new onCall.HttpsError("internal", "Authentication is not configured correctly.");
  }

  const client = new OAuth2Client(clientId);

  try {
    const ticket = await client.verifyIdToken({
      idToken: idToken,
      audience: clientId,
    });
    const payload = ticket.getPayload();

    if (!payload) {
      throw new onCall.HttpsError("unauthenticated", "Invalid ID token.");
    }

    const {sub: googleUid, email, name, picture} = payload;
    // We create a unique UID for Firebase Auth based on the Google UID
    const uid = `google:${googleUid}`;
    let isNewUser = false;

    // Update or create user in Firebase Auth
    try {
      await admin.auth().updateUser(uid, {
        email: email,
        displayName: name,
        photoURL: picture,
      });
    } catch (error) {
      if (error.code === "auth/user-not-found") {
        isNewUser = true;
        await admin.auth().createUser({
          uid: uid,
          email: email,
          displayName: name,
          photoURL: picture,
        });
      } else {
        throw error; // Re-throw other errors
      }
    }

    // Create or update user profile in Firestore 'users' collection
    const userRef = db.collection("users").doc(uid);
    const userDoc = await userRef.get();

    // Create profile in Firestore only if it doesn't exist
    if (isNewUser || !userDoc.exists) {
      await userRef.set({
        name,
        email,
        photoURL: picture,
        addresses: [], // Initialize with empty addresses
      }, {merge: true});
    }

    // Create a custom token for the Firebase user
    const customToken = await admin.auth().createCustomToken(uid);
    return {customToken};
  } catch (error) {
    logger.error("Error verifying Google token:", error);
    throw new onCall.HttpsError("unauthenticated", "Token verification failed.", error.message);
  }
});


/**
 * Creates an order in Firestore and optionally initiates a PIX payment.
 */
exports.createOrder = onCall({secrets}, async (request) => {
  const accessToken = process.env.MERCADO_PAGO_ACCESS_TOKEN;
  if (!accessToken) {
    logger.error("MERCADO_PAGO_ACCESS_TOKEN n√£o est√° configurado.");
    throw new Error("Erro de configura√ß√£o interna do servidor.");
  }
  const client = new MercadoPagoConfig({accessToken});

  const {details, cart, total, pixOption} = request.data;
  const userId = request.auth?.uid || null;

  // 1. Validate input
  if (!details || !cart || !total) {
    throw new Error("Dados do pedido incompletos.");
  }

  // 2. Generate a sequential order number atomically
  const counterRef = db.doc("_internal/counters");
  let orderNumber;
  try {
    await db.runTransaction(async (transaction) => {
      const counterDoc = await transaction.get(counterRef);
      if (!counterDoc.exists) {
        orderNumber = 1;
        transaction.set(counterRef, {orderNumber: orderNumber + 1});
      } else {
        orderNumber = counterDoc.data().orderNumber;
        transaction.update(counterRef, {orderNumber: orderNumber + 1});
      }
    });
  } catch (error) {
    logger.error("Falha ao gerar o n√∫mero do pedido:", error);
    throw new Error("N√£o foi poss√≠vel gerar o n√∫mero do pedido.");
  }


  // 3. Prepare order data for Firestore
  const isPixPayNow = details.paymentMethod === "pix" && pixOption === "payNow";
  const orderStatus = isPixPayNow ? "awaiting-payment" : "pending";

  const orderData = {
    userId, // Associate order with user if logged in
    orderNumber,
    customer: {
      name: details.name,
      phone: details.phone,
      orderType: details.orderType,
      neighborhood: details.neighborhood || "",
      street: details.street || "",
      number: details.number || "",
      complement: details.complement || "",
      cpf: details.cpf || "",
    },
    items: cart,
    total,
    deliveryFee: details.deliveryFee || 0,
    allergies: details.allergies || "",
    paymentMethod: details.paymentMethod,
    changeNeeded: details.changeNeeded || false,
    changeAmount: details.changeAmount || "",
    notes: details.notes || "",
    status: orderStatus,
    paymentStatus: "pending",
    createdAt: admin.firestore.FieldValue.serverTimestamp(),
    mercadoPagoDetails: {}, // Initialize the object
  };

  // 4. Create the order document
  const orderRef = await db.collection("orders").add(orderData);
  const orderId = orderRef.id;
  logger.info(`Pedido #${orderNumber} (ID: ${orderId}) criado no Firestore.`);

  // 5. If it's a PIX payment, create it in Mercado Pago
  if (isPixPayNow) {
    if (!details.cpf) {
      throw new Error("CPF √© obrigat√≥rio para pagamento com PIX.");
    }

    // FIX: Use process.env.FUNCTION_REGION which is a standard populated env var for v2 functions.
    const region = process.env.FUNCTION_REGION || "us-central1";
    const notificationUrl = `https://${region}-${process.env.GCLOUD_PROJECT}.cloudfunctions.net/mercadoPagoWebhook`;
    logger.info(`Usando a URL de notifica√ß√£o: ${notificationUrl}`);

    const paymentData = {
      transaction_amount: total,
      description: `Pedido #${orderNumber} - ${details.name}`,
      payment_method_id: "pix",
      payer: {
        email: `cliente_${orderId}@santasensacao.me`, // MP requires an email
        first_name: details.name.split(" ")[0],
        last_name: details.name.split(" ").slice(1).join(" ") || "Cliente",
        identification: {
          type: "CPF",
          number: details.cpf.replace(/\D/g, ""), // Ensure only digits are sent
        },
      },
      notification_url: notificationUrl,
      external_reference: orderId,
    };

    try {
      const payment = new Payment(client);
      const idempotencyKey = crypto.randomUUID();
      const result = await payment.create({
        body: paymentData,
        requestOptions: {idempotencyKey},
      });

      const paymentId = result.id?.toString();
      const qrCodeBase64 = result.point_of_interaction?.transaction_data?.qr_code_base64;
      const copyPaste = result.point_of_interaction?.transaction_data?.qr_code;

      if (!paymentId || !qrCodeBase64 || !copyPaste) {
        throw new Error("Dados PIX n√£o retornados pelo Mercado Pago.");
      }

      // Save payment details to our order
      await orderRef.update({
        "mercadoPagoDetails.paymentId": paymentId,
        "mercadoPagoDetails.qrCodeBase64": qrCodeBase64,
        "mercadoPagoDetails.qrCode": copyPaste,
      });

      logger.info(`Pagamento PIX criado para o pedido #${orderNumber}, ID MP: ${paymentId}`);

      return {
        orderId,
        orderNumber,
        pixData: {qrCodeBase64, copyPaste},
      };
    } catch (error) {
      logger.error(`Erro ao criar pagamento MP para o pedido #${orderNumber}:`, error.cause || error);
      throw new Error("Falha ao criar cobran√ßa PIX.");
    }
  }

  // 6. Return order info for non-PIX or "Pay Later" orders
  return {orderId, orderNumber};
});

// FIX: Added the missing `createReservation` Cloud Function.
// This function handles the creation of reservations, which are stored as a special type of order.
// It generates an atomic order number and saves the reservation details to Firestore.
/**
 * Creates a reservation (as an order) in Firestore.
 */
exports.createReservation = onCall({secrets}, async (request) => {
  const {details} = request.data;
  const userId = request.auth?.uid || null;

  // 1. Validate input
  if (!details || !details.name || !details.phone || !details.reservationDate || !details.reservationTime || !details.numberOfPeople) {
    throw new Error("Dados da reserva incompletos.");
  }

  // 2. Generate a sequential order number atomically
  const counterRef = db.doc("_internal/counters");
  let orderNumber;
  try {
    await db.runTransaction(async (transaction) => {
      const counterDoc = await transaction.get(counterRef);
      if (!counterDoc.exists) {
        orderNumber = 1;
        transaction.set(counterRef, {orderNumber: orderNumber + 1});
      } else {
        orderNumber = counterDoc.data().orderNumber;
        transaction.update(counterRef, {orderNumber: orderNumber + 1});
      }
    });
  } catch (error) {
    logger.error("Falha ao gerar o n√∫mero do pedido:", error);
    throw new Error("N√£o foi poss√≠vel gerar o n√∫mero do pedido.");
  }

  // 3. Prepare reservation data for Firestore (as an Order)
  const orderData = {
    userId,
    orderNumber,
    customer: {
      name: details.name,
      phone: details.phone,
      orderType: "local",
      reservationDate: details.reservationDate,
      reservationTime: details.reservationTime,
    },
    numberOfPeople: details.numberOfPeople,
    notes: details.notes || "",
    status: "pending",
    paymentStatus: "pending",
    createdAt: admin.firestore.FieldValue.serverTimestamp(),
  };

  // 4. Create the order document
  const orderRef = await db.collection("orders").add(orderData);
  const orderId = orderRef.id;
  logger.info(`Reserva #${orderNumber} (ID: ${orderId}) criada no Firestore.`);

  // 5. Return order info
  return {orderId, orderNumber};
});


/**
 * Webhook to receive payment status updates from Mercado Pago.
 */
exports.mercadoPagoWebhook = onRequest({secrets}, async (request, response) => {
  const webhookSecret = process.env.MERCADO_PAGO_WEBHOOK_SECRET;
  const accessToken = process.env.MERCADO_PAGO_ACCESS_TOKEN;

  if (!webhookSecret || !accessToken) {
    logger.error("Secrets do Mercado Pago n√£o est√£o configurados no ambiente da fun√ß√£o.");
    return response.status(500).send("Internal Server Error: Missing configuration.");
  }
  const client = new MercadoPagoConfig({accessToken});

  if (request.method !== "POST") {
    return response.status(405).send("Method Not Allowed");
  }

  try {
    // 1. Validate Signature for security
    const signature = request.headers["x-signature"];
    const requestId = request.headers["x-request-id"];
    const receivedTopic = request.body.type;

    // The 'data.id' for signature validation comes from the query parameters
    const paymentIdFromQuery = request.query["data.id"];

    if (!signature || !requestId || !paymentIdFromQuery || receivedTopic !== "payment") {
      logger.warn("Webhook ignorado: Faltando headers, data.id no query, ou t√≥pico inv√°lido.", {
        headers: request.headers,
        query: request.query,
        body: request.body,
      });
      return response.status(200).send("OK"); // Respond OK to prevent retries
    }

    const [ts, hash] = signature.split(",").map((part) => part.split("=")[1]);

    // The manifest MUST be built from query params as per Mercado Pago docs.
    const manifest = `id:${paymentIdFromQuery};request-id:${requestId};ts:${ts};`;

    const hmac = crypto.createHmac("sha256", webhookSecret);
    hmac.update(manifest);
    const expectedHash = hmac.digest("hex");

    if (crypto.timingSafeEqual(Buffer.from(hash), Buffer.from(expectedHash)) === false) {
      logger.error("Falha na valida√ß√£o da assinatura do Webhook.");
      return response.status(401).send("Invalid Signature");
    }

    // 2. Process the payment update
    const paymentId = request.body.data.id;
    logger.info(`Webhook validado recebido para o pagamento: ${paymentId}`);

    const payment = new Payment(client);
    const paymentInfo = await payment.get({id: paymentId});

    if (!paymentInfo || !paymentInfo.external_reference) {
      throw new Error(`Pagamento ${paymentId} n√£o encontrado ou sem external_reference.`);
    }

    const orderId = paymentInfo.external_reference;
    const orderRef = db.collection("orders").doc(orderId);

    // 3. Update Firestore based on payment status
    const updateData = {
      "mercadoPagoDetails.status": paymentInfo.status,
      "mercadoPagoDetails.statusDetail": paymentInfo.status_detail,
    };

    if (paymentInfo.status === "approved") {
      updateData.paymentStatus = "paid_online";
      updateData.status = "pending"; // Move from 'awaiting-payment' to 'pending' for the kitchen
      updateData["mercadoPagoDetails.transactionId"] = paymentInfo.transaction_details?.transaction_id || null;
      await orderRef.update(updateData);
      logger.info(`Pedido ${orderId} atualizado para PAGO via webhook.`);
    } else if (["cancelled", "rejected"].includes(paymentInfo.status)) {
      updateData.status = "cancelled";
      await orderRef.update(updateData);
      logger.info(`Pedido ${orderId} atualizado para CANCELADO/REJEITADO via webhook.`);
    } else {
      await orderRef.update(updateData);
      logger.info(`Status do pedido ${orderId} atualizado para '${paymentInfo.status}'.`);
    }

    return response.status(200).send("OK");
  } catch (error) {
    logger.error("Erro ao processar webhook do Mercado Pago:", error);
    return response.status(500).send("Internal Server Error");
  }
});

/**
 * Processes a full refund for a given order.
 */
exports.refundPayment = onCall({secrets}, async (request) => {
  const accessToken = process.env.MERCADO_PAGO_ACCESS_TOKEN;
  if (!accessToken) {
    logger.error("MERCADO_PAGO_ACCESS_TOKEN n√£o est√° configurado.");
    throw new Error("Erro de configura√ß√£o interna do servidor.");
  }
  const client = new MercadoPagoConfig({accessToken});

  const {orderId} = request.data;
  if (!orderId) {
    throw new Error("O ID do pedido √© obrigat√≥rio para o estorno.");
  }

  try {
    const orderDoc = await db.collection("orders").doc(orderId).get();
    if (!orderDoc.exists) {
      throw new Error("Pedido n√£o encontrado.");
    }

    const orderData = orderDoc.data();
    const paymentId = orderData.mercadoPagoDetails?.paymentId;

    if (!paymentId) {
      throw new Error("Este pedido n√£o possui um ID de pagamento do Mercado Pago para estornar.");
    }
    if (orderData.paymentStatus === "refunded") {
      throw new Error("Este pagamento j√° foi estornado.");
    }

    logger.info(`Iniciando estorno para o pedido ${orderId}, Pagamento MP: ${paymentId}`);

    const refund = new PaymentRefund(client);
    await refund.create({payment_id: paymentId});

    // For confirmation, fetch the payment again from Mercado Pago
    const payment = new Payment(client);
    const updatedPaymentInfo = await payment.get({id: paymentId});

    await db.collection("orders").doc(orderId).update({
      paymentStatus: "refunded",
      status: "cancelled",
      "mercadoPagoDetails.status": updatedPaymentInfo.status,
      "mercadoPagoDetails.refunds": updatedPaymentInfo.refunds || [],
    });

    logger.info(`Estorno conclu√≠do e pedido ${orderId} atualizado.`);
    return {success: true, message: "Pagamento estornado com sucesso!"};
  } catch (error) {
    logger.error(`Falha ao estornar o pedido ${orderId}:`, error.cause || error);
    const errorMessage = error.cause?.error?.message || error.cause?.message || "Erro ao processar o estorno.";
    throw new Error(errorMessage);
  }
});

/**
 * Manages user profile picture upload and removal securely.
 */
exports.manageProfilePicture = onCall({secrets}, async (request) => {
  const uid = request.auth?.uid;
  if (!uid) {
    throw new onCall.HttpsError("unauthenticated", "A fun√ß√£o deve ser chamada por um usu√°rio autenticado.");
  }

  const {imageBase64} = request.data;
  const bucket = storage.bucket();
  const filePath = `user-profiles/${uid}/profile.jpg`;
  const file = bucket.file(filePath);

  // Case 1: Remove photo (imageBase64 is null)
  if (imageBase64 === null) {
    try {
      await file.delete({ignoreNotFound: true});
      await admin.auth().updateUser(uid, {photoURL: null});
      await db.collection("users").doc(uid).update({photoURL: null});
      logger.info(`Foto de perfil removida para o usu√°rio: ${uid}`);
      return {success: true, photoURL: null};
    } catch (error) {
      logger.error(`Falha ao remover a foto de perfil para ${uid}:`, error);
      throw new onCall.HttpsError("internal", "N√£o foi poss√≠vel remover a foto de perfil.");
    }
  }

  // Case 2: Upload/update photo (imageBase64 is a string)
  if (typeof imageBase64 === "string") {
    try {
      const matches = imageBase64.match(/^data:(image\/[a-z]+);base64,(.+)$/);
      if (!matches || matches.length !== 3) {
        throw new onCall.HttpsError("invalid-argument", "Formato de imagem base64 inv√°lido.");
      }
      const mimeType = matches[1];
      const base64Data = matches[2];
      const buffer = Buffer.from(base64Data, "base64");

      // Upload the file and make it public
      await file.save(buffer, {
        metadata: {contentType: mimeType},
        public: true,
      });

      const publicUrl = file.publicUrl();
      // Appending a timestamp as a query parameter to act as a cache buster.
      // This ensures the browser always fetches the latest version of the profile picture.
      const photoURL = `${publicUrl}?t=${new Date().getTime()}`;

      // Update Firebase Auth and Firestore user records
      await admin.auth().updateUser(uid, {photoURL});
      await db.collection("users").doc(uid).update({photoURL});

      logger.info(`Foto de perfil atualizada para o usu√°rio: ${uid}`);
      return {success: true, photoURL};
    } catch (error) {
      logger.error(`Falha ao atualizar a foto de perfil para ${uid}:`, error);
      throw new onCall.HttpsError("internal", "N√£o foi poss√≠vel salvar a nova foto de perfil.");
    }
  }

  throw new onCall.HttpsError("invalid-argument", "Payload inv√°lido para gerenciar foto de perfil.");
});